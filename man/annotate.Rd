% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operations_annotate.R
\name{left_join.ImmunData}
\alias{left_join.ImmunData}
\alias{annotate_receptors}
\alias{annotate_barcodes}
\alias{annotate_chains}
\title{Join External Annotations onto an ImmunData Object}
\usage{
\method{left_join}{ImmunData}(
  idata,
  annotations,
  match_col,
  keep_repertoires = TRUE,
  remove_limit = FALSE
)

annotate_receptors(
  idata,
  annotations,
  annot_col = imd_schema("receptor"),
  keep_repertoires = TRUE,
  remove_limit = FALSE
)

annotate_barcodes(
  idata,
  annotations,
  annot_col = "<rownames>",
  keep_repertoires = TRUE,
  remove_limit = FALSE
)

annotate_chains(
  idata,
  annotations,
  annot_col = imd_schema("chain"),
  keep_repertoires = TRUE,
  remove_limit = FALSE
)
}
\arguments{
\item{idata}{An \link{ImmunData} object.}

\item{annotations}{A data frame or tibble with the annotations you
wish to add.}

\item{match_col}{\emph{Named} character vector where
names = column(s) in \strong{\code{idata$annotations}},
values = corresponding column(s) in
\strong{\code{annotations}}.
Each pair defines a join key.}

\item{keep_repertoires}{Logical. After joining, should the repertoire table
be recomputed (via \code{agg_repertoires()}) so that
any new columns propagate there as well?}

\item{remove_limit}{Logical.  If \code{FALSE} (default) the function aborts if
you try to join a \emph{very wide} annotation table
(>\,50 columns) to guard against accidental GEX
matrices; set to \code{TRUE} to override.}
}
\value{
A \strong{new} \link{ImmunData} object with the extra columns appended to
its \code{annotations} table (and, if \code{keep_repertoires = TRUE}, to the
repertoire table too).  The \code{receptors} table is \emph{not} modified.
}
\description{
\code{annotate_immundata()} is the low‑level engine that merges an external
annotation table into the \strong{annotation slot} of an \link{ImmunData}
object.  You specify one or more matching columns—typically receptor IDs
or cell barcodes—and the function performs a \code{left_join()} so that every
row in \code{idata$annotations} inherits the new information.  Convenience
wrappers \code{\link[=annotate_receptors]{annotate_receptors()}} and \code{\link[=annotate_cells]{annotate_cells()}} handle the
common “receptor ID” and “cell barcode” use‑cases.
}
\examples{
\dontrun{
# Add clonotype assignments by receptor ID
ann <- data.frame(
  receptor_id = c(1, 5, 9),
  clonotype   = c("C1", "C1", "C2")
)
idata2 <- annotate_receptors(idata, ann)

# Add a mitochondrial percentage per cell (row names as barcodes)
mito <- data.frame(
  pct_mito = runif(nrow(idata$annotations)),
  row.names = idata$annotations$imd_cell_id
)
idata3 <- annotate_cells(idata, mito, annot_col = "<rownames>")
}

}
\seealso{
\itemize{
\item \code{\link[=annotate_receptors]{annotate_receptors()}} – wrapper for receptor‑level joins
\item \code{\link[=annotate_cells]{annotate_cells()}}    – wrapper for cell‑level joins
\item \code{\link[=agg_repertoires]{agg_repertoires()}}   – recompute repertoire summaries
}
}
\concept{Annotation}
